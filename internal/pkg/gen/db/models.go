// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ArchitectureType string

const (
	ArchitectureTypeArm ArchitectureType = "arm"
	ArchitectureTypeAmd ArchitectureType = "amd"
)

func (e *ArchitectureType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ArchitectureType(s)
	case string:
		*e = ArchitectureType(s)
	default:
		return fmt.Errorf("unsupported scan type for ArchitectureType: %T", src)
	}
	return nil
}

type NullArchitectureType struct {
	ArchitectureType ArchitectureType `json:"architecture_type"`
	Valid            bool             `json:"valid"` // Valid is true if ArchitectureType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullArchitectureType) Scan(value interface{}) error {
	if value == nil {
		ns.ArchitectureType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ArchitectureType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullArchitectureType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ArchitectureType), nil
}

type HighestSeverity string

const (
	HighestSeverityHigh   HighestSeverity = "high"
	HighestSeverityMedium HighestSeverity = "medium"
	HighestSeverityLow    HighestSeverity = "low"
)

func (e *HighestSeverity) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = HighestSeverity(s)
	case string:
		*e = HighestSeverity(s)
	default:
		return fmt.Errorf("unsupported scan type for HighestSeverity: %T", src)
	}
	return nil
}

type NullHighestSeverity struct {
	HighestSeverity HighestSeverity `json:"highest_severity"`
	Valid           bool            `json:"valid"` // Valid is true if HighestSeverity is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHighestSeverity) Scan(value interface{}) error {
	if value == nil {
		ns.HighestSeverity, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.HighestSeverity.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHighestSeverity) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.HighestSeverity), nil
}

type ImageSourceType string

const (
	ImageSourceTypeDockerhub ImageSourceType = "dockerhub"
	ImageSourceTypeEcr       ImageSourceType = "ecr"
	ImageSourceTypeJfrog     ImageSourceType = "jfrog"
)

func (e *ImageSourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImageSourceType(s)
	case string:
		*e = ImageSourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ImageSourceType: %T", src)
	}
	return nil
}

type NullImageSourceType struct {
	ImageSourceType ImageSourceType `json:"image_source_type"`
	Valid           bool            `json:"valid"` // Valid is true if ImageSourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImageSourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ImageSourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImageSourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImageSourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ImageSourceType), nil
}

type RepositorySourceType string

const (
	RepositorySourceTypeGithub    RepositorySourceType = "github"
	RepositorySourceTypeBitbucket RepositorySourceType = "bitbucket"
	RepositorySourceTypeGitlab    RepositorySourceType = "gitlab"
)

func (e *RepositorySourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RepositorySourceType(s)
	case string:
		*e = RepositorySourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for RepositorySourceType: %T", src)
	}
	return nil
}

type NullRepositorySourceType struct {
	RepositorySourceType RepositorySourceType `json:"repository_source_type"`
	Valid                bool                 `json:"valid"` // Valid is true if RepositorySourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRepositorySourceType) Scan(value interface{}) error {
	if value == nil {
		ns.RepositorySourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RepositorySourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRepositorySourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RepositorySourceType), nil
}

type ResourceType string

const (
	ResourceTypeRepository ResourceType = "repository"
	ResourceTypeImage      ResourceType = "image"
)

func (e *ResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ResourceType(s)
	case string:
		*e = ResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ResourceType: %T", src)
	}
	return nil
}

type NullResourceType struct {
	ResourceType ResourceType `json:"resource_type"`
	Valid        bool         `json:"valid"` // Valid is true if ResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ResourceType), nil
}

type InputImage struct {
	Indx                 int64            `json:"indx"`
	ID                   uuid.UUID        `json:"id"`
	RepositoryID         uuid.NullUUID    `json:"repository_id"`
	Name                 string           `json:"name"`
	Url                  string           `json:"url"`
	Type                 ResourceType     `json:"type"`
	Source               ImageSourceType  `json:"source"`
	NumberOfLayers       int32            `json:"number_of_layers"`
	Architecture         ArchitectureType `json:"architecture"`
	CreatedDateTimestamp time.Time        `json:"created_date_timestamp"`
}

type InputRepository struct {
	Indx                 int64                `json:"indx"`
	ID                   uuid.UUID            `json:"id"`
	Name                 string               `json:"name"`
	Url                  string               `json:"url"`
	Type                 ResourceType         `json:"type"`
	Source               RepositorySourceType `json:"source"`
	Size                 int64                `json:"size"`
	LastPush             time.Time            `json:"last_push"`
	CreatedDateTimestamp time.Time            `json:"created_date_timestamp"`
}

type Scan struct {
	Indx              int64           `json:"indx"`
	ScanID            int32           `json:"scan_id"`
	ResourceID        uuid.UUID       `json:"resource_id"`
	ResourceType      ResourceType    `json:"resource_type"`
	HighestSeverity   HighestSeverity `json:"highest_severity"`
	TotalFindings     int32           `json:"total_findings"`
	IsReported        bool            `json:"is_reported"`
	ScanDateTimestamp time.Time       `json:"scan_date_timestamp"`
}
